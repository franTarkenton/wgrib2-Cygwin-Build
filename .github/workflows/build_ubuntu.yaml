name: wgrib2-ubuntu-compile

# manual run
on:
  workflow_dispatch:

# on:
#   push:


jobs:
  # This workflow contains a single job called "buildjob"
  buildjob:
    defaults:
      run:
        shell: bash
    name: 'Compile WGRIB2'
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    env:
      CC: gcc
      FC: gfortran
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      id: checkout
      with:
        fetch-depth: 0

    # runs the shell script that will download the wgrib2 source
    # files and then compile them
    - name: get and compile wgrib2
      id: get-compile-wgrib
      shell: bash
      run: |
        sudo apt-get install -y build-essential libaec-dev zlib1g-dev libcurl4-openssl-dev libboost-dev curl wget zip unzip bzip2 gfortran gcc g++
        wget -c ftp://ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/wgrib2.tgz
        tar -xzvf wgrib2.tgz
        cd grib2
        export CC=gcc
        export FC=gfortran
        make
        ls -la *
        cp wgrib2/wgrib2 ../.

    # calculates a release tag and sets the variable RELEASETAG
    # to be equal to it.
    - id: calculateRelease
      name: calculate Release Tag
      shell: bash
      run: |
        RELEASETAG=$(date +%Y%m%d-%H%M)
        echo ::set-output name=RELEASETAG::${RELEASETAG}

    # creates an actual release on the current commit, the tag is 
    # the tag calculate in the previous step (based on timestamp)
    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{ steps.calculateRelease.outputs.RELEASETAG }}-wgrib-ubuntu-2004
        tag_name: ${{ steps.calculateRelease.outputs.RELEASETAG }}
        body: wgrib 2 ubuntu release
      env:
        GITHUB_TOKEN: ${{ github.token }}

    # uploads the compiled wgrib tarball to the github release
    - name: upload ubuntu artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: wgrib2
        asset_name: wgrib2
        asset_content_type: application/octet-stream
